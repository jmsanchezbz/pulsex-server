{"version":3,"file":"static/js/645.0d533ecf.chunk.js","mappings":"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","sources":["../../packages/token-lists/dist/getTokenList-Q3ZXQSEZ.mjs"],"sourcesContent":["import {\n  __async\n} from \"./chunk-2L3ZO4UM.mjs\";\n\n// ../utils/uriToHttp.ts\nfunction uriToHttp(uri) {\n  var _a, _b;\n  const protocol = uri.split(\":\")[0].toLowerCase();\n  switch (protocol) {\n    case \"https\":\n      return [uri];\n    case \"http\":\n      return [`https${uri.substring(4)}`, uri];\n    case \"ipfs\":\n      const hash = (_a = uri.match(/^ipfs:(\\/\\/)?(.*)$/i)) == null ? void 0 : _a[2];\n      return [`https://cloudflare-ipfs.com/ipfs/${hash}/`, `https://ipfs.io/ipfs/${hash}/`];\n    case \"ipns\":\n      const name = (_b = uri.match(/^ipns:(\\/\\/)?(.*)$/i)) == null ? void 0 : _b[2];\n      return [`https://cloudflare-ipfs.com/ipns/${name}/`, `https://ipfs.io/ipns/${name}/`];\n    default:\n      return [];\n  }\n}\n\n// react/getTokenList.ts\nimport remove from \"lodash/remove.js\";\nimport Ajv from \"ajv\";\n\n// schema/uniswap.json\nvar uniswap_default = {\n  $schema: \"http://json-schema.org/draft-07/schema#\",\n  $id: \"https://uniswap.org/tokenlist.schema.json\",\n  title: \"Uniswap Token List\",\n  description: \"Schema for lists of tokens compatible with the Uniswap Interface\",\n  definitions: {\n    Version: {\n      type: \"object\",\n      description: \"The version of the list, used in change detection\",\n      examples: [\n        {\n          major: 1,\n          minor: 0,\n          patch: 0\n        }\n      ],\n      additionalProperties: false,\n      properties: {\n        major: {\n          type: \"integer\",\n          description: \"The major version of the list. Must be incremented when tokens are removed from the list or token addresses are changed.\",\n          minimum: 0,\n          examples: [1, 2]\n        },\n        minor: {\n          type: \"integer\",\n          description: \"The minor version of the list. Must be incremented when tokens are added to the list.\",\n          minimum: 0,\n          examples: [0, 1]\n        },\n        patch: {\n          type: \"integer\",\n          description: \"The patch version of the list. Must be incremented for any changes to the list.\",\n          minimum: 0,\n          examples: [0, 1]\n        }\n      },\n      required: [\"major\", \"minor\", \"patch\"]\n    },\n    TagIdentifier: {\n      type: \"string\",\n      description: \"The unique identifier of a tag\",\n      minLength: 1,\n      maxLength: 10,\n      pattern: \"^[\\\\w]+$\",\n      examples: [\"compound\", \"stablecoin\"]\n    },\n    ExtensionIdentifier: {\n      type: \"string\",\n      description: \"The name of a token extension property\",\n      minLength: 1,\n      maxLength: 40,\n      pattern: \"^[\\\\w]+$\",\n      examples: [\"color\", \"is_fee_on_transfer\", \"aliases\"]\n    },\n    ExtensionMap: {\n      type: \"object\",\n      description: \"An object containing any arbitrary or vendor-specific token metadata\",\n      maxProperties: 10,\n      propertyNames: {\n        $ref: \"#/definitions/ExtensionIdentifier\"\n      },\n      additionalProperties: {\n        $ref: \"#/definitions/ExtensionValue\"\n      },\n      examples: [\n        {\n          color: \"#000000\",\n          is_verified_by_me: true\n        },\n        {\n          \"x-bridged-addresses-by-chain\": {\n            \"1\": {\n              bridgeAddress: \"0x4200000000000000000000000000000000000010\",\n              tokenAddress: \"0x4200000000000000000000000000000000000010\"\n            }\n          }\n        }\n      ]\n    },\n    ExtensionPrimitiveValue: {\n      anyOf: [\n        {\n          type: \"string\",\n          minLength: 1,\n          maxLength: 42,\n          examples: [\"#00000\"]\n        },\n        {\n          type: \"boolean\",\n          examples: [true]\n        },\n        {\n          type: \"number\",\n          examples: [15]\n        },\n        {\n          type: \"null\"\n        }\n      ]\n    },\n    ExtensionValue: {\n      anyOf: [\n        {\n          $ref: \"#/definitions/ExtensionPrimitiveValue\"\n        },\n        {\n          type: \"object\",\n          maxProperties: 10,\n          propertyNames: {\n            $ref: \"#/definitions/ExtensionIdentifier\"\n          },\n          additionalProperties: {\n            $ref: \"#/definitions/ExtensionValueInner0\"\n          }\n        }\n      ]\n    },\n    ExtensionValueInner0: {\n      anyOf: [\n        {\n          $ref: \"#/definitions/ExtensionPrimitiveValue\"\n        },\n        {\n          type: \"object\",\n          maxProperties: 10,\n          propertyNames: {\n            $ref: \"#/definitions/ExtensionIdentifier\"\n          },\n          additionalProperties: {\n            $ref: \"#/definitions/ExtensionValueInner1\"\n          }\n        }\n      ]\n    },\n    ExtensionValueInner1: {\n      anyOf: [\n        {\n          $ref: \"#/definitions/ExtensionPrimitiveValue\"\n        }\n      ]\n    },\n    TagDefinition: {\n      type: \"object\",\n      description: \"Definition of a tag that can be associated with a token via its identifier\",\n      additionalProperties: false,\n      properties: {\n        name: {\n          type: \"string\",\n          description: \"The name of the tag\",\n          pattern: \"^[ \\\\w]+$\",\n          minLength: 1,\n          maxLength: 20\n        },\n        description: {\n          type: \"string\",\n          description: \"A user-friendly description of the tag\",\n          pattern: \"^[ \\\\w\\\\.,:]+$\",\n          minLength: 1,\n          maxLength: 200\n        }\n      },\n      required: [\"name\", \"description\"],\n      examples: [\n        {\n          name: \"Stablecoin\",\n          description: \"A token with value pegged to another asset\"\n        }\n      ]\n    },\n    TokenInfo: {\n      type: \"object\",\n      description: \"Metadata for a single token in a token list\",\n      additionalProperties: false,\n      properties: {\n        chainId: {\n          type: \"integer\",\n          description: \"The chain ID of the Ethereum network where this token is deployed\",\n          minimum: 1,\n          examples: [1, 42]\n        },\n        address: {\n          type: \"string\",\n          description: \"The checksummed address of the token on the specified chain ID\",\n          pattern: \"^0x[a-fA-F0-9]{40}$\",\n          examples: [\"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\"]\n        },\n        decimals: {\n          type: \"integer\",\n          description: \"The number of decimals for the token balance\",\n          minimum: 0,\n          maximum: 255,\n          examples: [18]\n        },\n        name: {\n          type: \"string\",\n          description: \"The name of the token\",\n          minLength: 1,\n          maxLength: 40,\n          pattern: \"^[ \\\\w.'+\\\\-%/\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\xFF:&\\\\[\\\\]\\\\(\\\\)]+$\",\n          examples: [\"USD Coin\"]\n        },\n        symbol: {\n          type: \"string\",\n          description: \"The symbol for the token; must be alphanumeric\",\n          pattern: \"^[a-zA-Z0-9+\\\\-%/$.]+$\",\n          minLength: 1,\n          maxLength: 20,\n          examples: [\"USDC\"]\n        },\n        logoURI: {\n          type: \"string\",\n          description: \"A URI to the token logo asset; if not set, interface will attempt to find a logo based on the token address; suggest SVG or PNG of size 64x64\",\n          format: \"uri\",\n          examples: [\"ipfs://QmXfzKRvjZz3u5JRgC4v5mGVbm9ahrUiB4DgzHBsnWbTMM\"]\n        },\n        tags: {\n          type: \"array\",\n          description: \"An array of tag identifiers associated with the token; tags are defined at the list level\",\n          items: {\n            $ref: \"#/definitions/TagIdentifier\"\n          },\n          maxItems: 10,\n          examples: [\"stablecoin\", \"compound\"]\n        },\n        extensions: {\n          $ref: \"#/definitions/ExtensionMap\"\n        }\n      },\n      required: [\"chainId\", \"address\", \"decimals\", \"name\", \"symbol\"]\n    }\n  },\n  type: \"object\",\n  additionalProperties: false,\n  properties: {\n    name: {\n      type: \"string\",\n      description: \"The name of the token list\",\n      minLength: 1,\n      maxLength: 30,\n      pattern: \"^[\\\\w ]+$\",\n      examples: [\"My Token List\"]\n    },\n    timestamp: {\n      type: \"string\",\n      format: \"date-time\",\n      description: \"The timestamp of this list version; i.e. when this immutable version of the list was created\"\n    },\n    version: {\n      $ref: \"#/definitions/Version\"\n    },\n    tokens: {\n      type: \"array\",\n      description: \"The list of tokens included in the list\",\n      items: {\n        $ref: \"#/definitions/TokenInfo\"\n      },\n      minItems: 1,\n      maxItems: 1e4\n    },\n    keywords: {\n      type: \"array\",\n      description: \"Keywords associated with the contents of the list; may be used in list discoverability\",\n      items: {\n        type: \"string\",\n        description: \"A keyword to describe the contents of the list\",\n        minLength: 1,\n        maxLength: 20,\n        pattern: \"^[\\\\w ]+$\",\n        examples: [\"compound\", \"lending\", \"personal tokens\"]\n      },\n      maxItems: 20,\n      uniqueItems: true\n    },\n    tags: {\n      type: \"object\",\n      description: \"A mapping of tag identifiers to their name and description\",\n      propertyNames: {\n        $ref: \"#/definitions/TagIdentifier\"\n      },\n      additionalProperties: {\n        $ref: \"#/definitions/TagDefinition\"\n      },\n      maxProperties: 20,\n      examples: [\n        {\n          stablecoin: {\n            name: \"Stablecoin\",\n            description: \"A token with value pegged to another asset\"\n          }\n        }\n      ]\n    },\n    logoURI: {\n      type: \"string\",\n      description: \"A URI for the logo of the token list; prefer SVG or PNG of size 256x256\",\n      format: \"uri\",\n      examples: [\"ipfs://QmXfzKRvjZz3u5JRgC4v5mGVbm9ahrUiB4DgzHBsnWbTMM\"]\n    }\n  },\n  required: [\"name\", \"timestamp\", \"version\", \"tokens\"]\n};\n\n// react/getTokenList.ts\nvar tokenListValidator = new Ajv({ allErrors: true }).compile(uniswap_default);\nfunction getTokenList(listUrl) {\n  return __async(this, null, function* () {\n    var _a, _b;\n    const urls = uriToHttp(listUrl);\n    for (let i = 0; i < urls.length; i++) {\n      const url = urls[i];\n      const isLast = i === urls.length - 1;\n      let response;\n      try {\n        response = yield fetch(url);\n      } catch (error) {\n        console.error(\"Failed to fetch list\", listUrl, error);\n        if (isLast)\n          throw new Error(`Failed to download list ${listUrl}`);\n        continue;\n      }\n      if (!response.ok) {\n        if (isLast)\n          throw new Error(`Failed to download list ${listUrl}`);\n        continue;\n      }\n      const json = yield response.json();\n      if (json.tokens) {\n        remove(json.tokens, (token) => {\n          return token.symbol ? token.symbol.length === 0 : true;\n        });\n      }\n      if (!tokenListValidator(json)) {\n        const validationErrors = (_b = (_a = tokenListValidator.errors) == null ? void 0 : _a.reduce((memo, error) => {\n          var _a2;\n          const add = `${error.dataPath} ${(_a2 = error.message) != null ? _a2 : \"\"}`;\n          return memo.length > 0 ? `${memo}; ${add}` : `${add}`;\n        }, \"\")) != null ? _b : \"unknown error\";\n        throw new Error(`Token list failed validation: ${validationErrors}`);\n      }\n      return json;\n    }\n    throw new Error(\"Unrecognized list URL protocol.\");\n  });\n}\nexport {\n  getTokenList as default,\n  tokenListValidator\n};\n"],"names":["tokenListValidator","allErrors","compile","$schema","$id","title","description","definitions","Version","type","examples","major","minor","patch","additionalProperties","properties","minimum","required","TagIdentifier","minLength","maxLength","pattern","ExtensionIdentifier","ExtensionMap","maxProperties","propertyNames","$ref","color","is_verified_by_me","bridgeAddress","tokenAddress","ExtensionPrimitiveValue","anyOf","ExtensionValue","ExtensionValueInner0","ExtensionValueInner1","TagDefinition","name","TokenInfo","chainId","address","decimals","maximum","symbol","logoURI","format","tags","items","maxItems","extensions","timestamp","version","tokens","minItems","keywords","uniqueItems","stablecoin","getTokenList","listUrl","__async","this","_a","_b","urls","uri","split","toLowerCase","concat","substring","hash","match","uriToHttp","i","length","url","isLast","response","fetch","error","console","Error","ok","json","remove","token","validationErrors","errors","reduce","memo","_a2","add","dataPath","message"],"sourceRoot":""}